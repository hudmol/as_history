<%
  json.each do |k,val|
    sct = []
    if diff.is_a?(Hash)
      if diff.has_key?('_adds') # top level diff
        if diff['_adds'].has_key?(k)
          sct = [{:class => 'history-change history-add', :value => val, :diff => {'_to' => diff['_adds'][k], '_from' => nil}}]
          sct.push({:class => 'history-diff-field', :value => val})
        elsif diff['_removes'].has_key?(k)
          sct = [{:class => 'history-change history-remove', :value => val, :diff => {'_to' => nil, '_from' => diff['_removes'][k]}}]
          sct.push({:class => 'history-diff-field', :value => val})
        elsif diff['_changes'].has_key?(k)
          if diff['_changes'][k].is_a?(Hash) && diff['_changes'][k].keys - skip_fields != []
            sct = [{:class => 'history-change history-remove', :value => diff['_changes'][k]['_from'], :diff => diff['_changes'][k]},
                   {:class => 'history-change history-add', :value => diff['_changes'][k]['_to'], :diff => diff['_changes'][k]}]
            sct.push({:class => 'history-diff-field', :value => diff['_changes'][k]['_to']})
          elsif diff['_changes'][k].is_a?(Array)
            sct = [{:class => 'history-change', :value => val, :diff => diff['_changes'][k]}]
            sct.push({:class => 'history-diff-field', :value => val})
          end
        end
      else
        if diff.has_key?('_from')
          sct = []
          sct.push({:class => 'history-change history-remove', :value => diff['_from'][k]}) if diff['_from'] && diff['_from'][k]
          sct.push({:class => 'history-change history-add', :value => diff['_to'][k]}) if diff['_to'] && diff['_to'][k]
        elsif diff.has_key?(k) && diff[k].is_a?(Hash) && diff[k].has_key?('_from')
          sct = [{:class => 'history-change history-remove', :value => diff[k]['_from']},
                 {:class => 'history-change history-add', :value => diff[k]['_to']}]
        end
      end
    end
    sct.push({:class => 'history-clean-field', :value => val}) if sct.empty?

      sct.each do |h|
        v = h[:value]
        unless (v.is_a?(Array) && v.empty?) || skip_fields.include?(k) || (['repository', 'parent'].include?(k) && !top)
%>
          <div class="history-field <%= h[:class] %>">
            <span class="history-field-label">
<%
              if top
                label = t(data['model'] + '.' + k)
              else
                label = t(field.sub(/s$/,'') + '.' + k)
              end
              label = (label[:_plural] || k) if label.is_a?(Hash)
%>
              <%= label %>:
            </span>

<%
          if v.is_a?(String) && v.start_with?('/history/')
%>
            <%= va = v.split('/'); link_to version_display(va[2], va[3], va[4]), v %>
<%
          elsif v.is_a?(Hash) && v.has_key?('ref') && v['ref'].start_with?('/history')
%>
            <%= va = v['ref'].split('/'); link_to version_display(va[2], va[3], va[4]), v['ref'] %>
<%
          elsif v.is_a?(Hash)
%>
            <div class="history-subrecord">
              <%= render_aspace_partial :partial => "history/record", :locals => {:json => v, :diff => h[:diff], :top => false, :field => k} %>
            </div>
<%
          elsif v.is_a?(Array)
            v.zip((h[:diff].is_a?(Array) ? h[:diff] : [])) do |r,d|
            if r.is_a?(String)
%>
              <%= r %>
<%
            else
%>
              <div class="history-subrecord">
                <%= render_aspace_partial :partial => "history/record", :locals => {:json => r, :diff => d, :top => false, :field => k} %>
              </div>
<%
            end
          end
        else
          enum_type = top ? json['jsonmodel_type'] : field.sub(/s$/,'')
          enum_key = k == 'date_type' ? 'type' : k
%>
          <%=  t("enumerations.#{enum_type}_#{enum_key}.#{v.to_s}", :default => v.to_s) %>
<%
        end
%>
  </div>
<%
      end
    end
  end
%>
